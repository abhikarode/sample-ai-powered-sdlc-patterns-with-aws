"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const cdk_nag_1 = require("cdk-nag");
const opensearch_stack_1 = require("../lib/stacks/opensearch-stack");
const bedrock_stack_1 = require("../lib/stacks/bedrock-stack");
const storage_stack_1 = require("../lib/stacks/storage-stack");
const lambda_stack_1 = require("../lib/stacks/lambda-stack");
const amplify_auth_stack_1 = require("../lib/stacks/amplify-auth-stack");
describe('CDK NAG Tests', () => {
    let app;
    beforeEach(() => {
        app = new cdk.App();
        // Add CDK NAG to the app
        cdk.Aspects.of(app).add(new cdk_nag_1.AwsSolutionsChecks({ verbose: true }));
    });
    test('OpenSearch Stack passes CDK NAG checks', () => {
        const stack = new opensearch_stack_1.OpenSearchStack(app, 'TestOpenSearchStack', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const annotations = assertions_1.Annotations.fromStack(stack);
        const errors = annotations.findError('*', assertions_1.Match.anyValue());
        const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
        console.log('OpenSearch Stack Errors:', errors);
        console.log('OpenSearch Stack Warnings:', warnings);
        // Should have no CDK NAG errors
        expect(errors).toHaveLength(0);
    });
    test('Storage Stack passes CDK NAG checks', () => {
        const stack = new storage_stack_1.StorageStack(app, 'TestStorageStack', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const annotations = assertions_1.Annotations.fromStack(stack);
        const errors = annotations.findError('*', assertions_1.Match.anyValue());
        const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
        console.log('Storage Stack Errors:', errors);
        console.log('Storage Stack Warnings:', warnings);
        expect(errors).toHaveLength(0);
    });
    test('Bedrock Stack passes CDK NAG checks', () => {
        // Create dependencies first
        const opensearchStack = new opensearch_stack_1.OpenSearchStack(app, 'TestOpenSearchStackForBedrock', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const stack = new bedrock_stack_1.BedrockStack(app, 'TestBedrockStack', {
            env: { account: '123456789012', region: 'us-east-1' },
            collectionArn: opensearchStack.collection.attrArn,
            bucketArn: opensearchStack.s3Bucket.attrArn,
            bedrockRoleArn: opensearchStack.bedrockRole.attrArn
        });
        const annotations = assertions_1.Annotations.fromStack(stack);
        const errors = annotations.findError('*', assertions_1.Match.anyValue());
        const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
        console.log('Bedrock Stack Errors:', errors);
        console.log('Bedrock Stack Warnings:', warnings);
        expect(errors).toHaveLength(0);
    });
    test('Lambda Stack passes CDK NAG checks', () => {
        // Create dependencies
        const storageStack = new storage_stack_1.StorageStack(app, 'TestStorageStackForLambda', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const stack = new lambda_stack_1.LambdaStack(app, 'TestLambdaStack', {
            env: { account: '123456789012', region: 'us-east-1' },
            domainAnalyzerBucket: storageStack.domainAnalyzerBucket,
            bedrockAgentId: 'test-agent-id',
            bedrockAgentAliasId: 'TSTALIASID',
            knowledgeBaseId: 'test-kb-id'
        });
        const annotations = assertions_1.Annotations.fromStack(stack);
        const errors = annotations.findError('*', assertions_1.Match.anyValue());
        const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
        console.log('Lambda Stack Errors:', errors);
        console.log('Lambda Stack Warnings:', warnings);
        expect(errors).toHaveLength(0);
    });
    test('Amplify Auth Stack passes CDK NAG checks', () => {
        // Create dependencies
        const storageStack = new storage_stack_1.StorageStack(app, 'TestStorageStackForAmplify', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const lambdaStack = new lambda_stack_1.LambdaStack(app, 'TestLambdaStackForAmplify', {
            env: { account: '123456789012', region: 'us-east-1' },
            domainAnalyzerBucket: storageStack.domainAnalyzerBucket,
            bedrockAgentId: 'test-agent-id',
            bedrockAgentAliasId: 'TSTALIASID',
            knowledgeBaseId: 'test-kb-id'
        });
        const stack = new amplify_auth_stack_1.AmplifyAuthStack(app, 'TestAmplifyAuthStack', {
            env: { account: '123456789012', region: 'us-east-1' },
            domainAnalyzerFunction: lambdaStack.domainAnalyzerFunction,
            docGeneratorFunction: lambdaStack.docGeneratorFunction,
            backendFunction: lambdaStack.backendFunction,
            backendFunctionUrl: lambdaStack.backendFunctionUrl,
            apiGatewayUrl: '' // No API Gateway needed
        });
        const annotations = assertions_1.Annotations.fromStack(stack);
        const errors = annotations.findError('*', assertions_1.Match.anyValue());
        const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
        console.log('Amplify Auth Stack Errors:', errors);
        console.log('Amplify Auth Stack Warnings:', warnings);
        expect(errors).toHaveLength(0);
    });
    test('All stacks together pass CDK NAG checks', () => {
        // Create all stacks in dependency order
        const opensearchStack = new opensearch_stack_1.OpenSearchStack(app, 'TestOpenSearchStackAll', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const storageStack = new storage_stack_1.StorageStack(app, 'TestStorageStackAll', {
            env: { account: '123456789012', region: 'us-east-1' }
        });
        const bedrockStack = new bedrock_stack_1.BedrockStack(app, 'TestBedrockStackAll', {
            env: { account: '123456789012', region: 'us-east-1' },
            collectionArn: opensearchStack.collection.attrArn,
            bucketArn: opensearchStack.s3Bucket.attrArn,
            bedrockRoleArn: opensearchStack.bedrockRole.attrArn
        });
        const lambdaStack = new lambda_stack_1.LambdaStack(app, 'TestLambdaStackAll', {
            env: { account: '123456789012', region: 'us-east-1' },
            domainAnalyzerBucket: storageStack.domainAnalyzerBucket,
            bedrockAgentId: bedrockStack.agentId,
            bedrockAgentAliasId: 'TSTALIASID',
            knowledgeBaseId: bedrockStack.knowledgeBaseId
        });
        const amplifyAuthStack = new amplify_auth_stack_1.AmplifyAuthStack(app, 'TestAmplifyAuthStackAll', {
            env: { account: '123456789012', region: 'us-east-1' },
            domainAnalyzerFunction: lambdaStack.domainAnalyzerFunction,
            docGeneratorFunction: lambdaStack.docGeneratorFunction,
            backendFunction: lambdaStack.backendFunction,
            backendFunctionUrl: lambdaStack.backendFunctionUrl,
            apiGatewayUrl: ''
        });
        // Check all stacks for errors
        const stacks = [opensearchStack, storageStack, bedrockStack, lambdaStack, amplifyAuthStack];
        stacks.forEach((stack, index) => {
            const stackNames = ['OpenSearch', 'Storage', 'Bedrock', 'Lambda', 'AmplifyAuth'];
            const annotations = assertions_1.Annotations.fromStack(stack);
            const errors = annotations.findError('*', assertions_1.Match.anyValue());
            const warnings = annotations.findWarning('*', assertions_1.Match.anyValue());
            console.log(`${stackNames[index]} Stack Errors:`, errors);
            console.log(`${stackNames[index]} Stack Warnings:`, warnings);
            expect(errors).toHaveLength(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrLW5hZy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2RrLW5hZy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLHVEQUE0RDtBQUM1RCxxQ0FBOEQ7QUFDOUQscUVBQWlFO0FBQ2pFLCtEQUEyRDtBQUMzRCwrREFBMkQ7QUFDM0QsNkRBQXlEO0FBQ3pELHlFQUFvRTtBQUVwRSxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLEdBQVksQ0FBQztJQUVqQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLHlCQUF5QjtRQUN6QixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSw0QkFBa0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1FBQ2xELE1BQU0sS0FBSyxHQUFHLElBQUksa0NBQWUsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUU7WUFDNUQsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFO1NBQ3RELENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLHdCQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pELE1BQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLGtCQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM1RCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxrQkFBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFFaEUsT0FBTyxDQUFD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QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQW5ub3RhdGlvbnMsIE1hdGNoIH0gZnJvbSAnYXdzLWNkay1saWIvYXNzZXJ0aW9ucyc7XG5pbXBvcnQgeyBBd3NTb2x1dGlvbnNDaGVja3MsIE5hZ1N1cHByZXNzaW9ucyB9IGZyb20gJ2Nkay1uYWcnO1xuaW1wb3J0IHsgT3BlblNlYXJjaFN0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9vcGVuc2VhcmNoLXN0YWNrJztcbmltcG9ydCB7IEJlZHJvY2tTdGFjayB9IGZyb20gJy4uL2xpYi9zdGFja3MvYmVkcm9jay1zdGFjayc7XG5pbXBvcnQgeyBTdG9yYWdlU3RhY2sgfSBmcm9tICcuLi9saWIvc3RhY2tzL3N0b3JhZ2Utc3RhY2snO1xuaW1wb3J0IHsgTGFtYmRhU3RhY2sgfSBmcm9tICcuLi9saWIvc3RhY2tzL2xhbWJkYS1zdGFjayc7XG5pbXBvcnQgeyBBbXBsaWZ5QXV0aFN0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9hbXBsaWZ5LWF1dGgtc3RhY2snO1xuXG5kZXNjcmliZSgnQ0RLIE5BRyBUZXN0cycsICgpID0+IHtcbiAgbGV0IGFwcDogY2RrLkFwcDtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgIC8vIEFkZCBDREsgTkFHIHRvIHRoZSBhcHBcbiAgICBjZGsuQXNwZWN0cy5vZihhcHApLmFkZChuZXcgQXdzU29sdXRpb25zQ2hlY2tzKHsgdmVyYm9zZTogdHJ1ZSB9KSk7XG4gIH0pO1xuXG4gIHRlc3QoJ09wZW5TZWFyY2ggU3RhY2sgcGFzc2VzIENESyBOQUcgY2hlY2tzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IE9wZW5TZWFyY2hTdGFjayhhcHAsICdUZXN0T3BlblNlYXJjaFN0YWNrJywge1xuICAgICAgZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGFubm90YXRpb25zID0gQW5ub3RhdGlvbnMuZnJvbVN0YWNrKHN0YWNrKTtcbiAgICBjb25zdCBlcnJvcnMgPSBhbm5vdGF0aW9ucy5maW5kRXJyb3IoJyonLCBNYXRjaC5hbnlWYWx1ZSgpKTtcbiAgICBjb25zdCB3YXJuaW5ncyA9IGFubm90YXRpb25zLmZpbmRXYXJuaW5nKCcqJywgTWF0Y2guYW55VmFsdWUoKSk7XG5cbiAgICBjb25zb2xlLmxvZygnT3BlblNlYXJjaCBTdGFjayBFcnJvcnM6JywgZXJyb3JzKTtcbiAgICBjb25zb2xlLmxvZygnT3BlblNlYXJjaCBTdGFjayBXYXJuaW5nczonLCB3YXJuaW5ncyk7XG5cbiAgICAvLyBTaG91bGQgaGF2ZSBubyBDREsgTkFHIGVycm9yc1xuICAgIGV4cGVjdChlcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnU3RvcmFnZSBTdGFjayBwYXNzZXMgQ0RLIE5BRyBjaGVja3MnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgU3RvcmFnZVN0YWNrKGFwcCwgJ1Rlc3RTdG9yYWdlU3RhY2snLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgYW5ub3RhdGlvbnMgPSBBbm5vdGF0aW9ucy5mcm9tU3RhY2soc3RhY2spO1xuICAgIGNvbnN0IGVycm9ycyA9IGFubm90YXRpb25zLmZpbmRFcnJvcignKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuICAgIGNvbnN0IHdhcm5pbmdzID0gYW5ub3RhdGlvbnMuZmluZFdhcm5pbmcoJyonLCBNYXRjaC5hbnlWYWx1ZSgpKTtcblxuICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlIFN0YWNrIEVycm9yczonLCBlcnJvcnMpO1xuICAgIGNvbnNvbGUubG9nKCdTdG9yYWdlIFN0YWNrIFdhcm5pbmdzOicsIHdhcm5pbmdzKTtcblxuICAgIGV4cGVjdChlcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnQmVkcm9jayBTdGFjayBwYXNzZXMgQ0RLIE5BRyBjaGVja3MnLCAoKSA9PiB7XG4gICAgLy8gQ3JlYXRlIGRlcGVuZGVuY2llcyBmaXJzdFxuICAgIGNvbnN0IG9wZW5zZWFyY2hTdGFjayA9IG5ldyBPcGVuU2VhcmNoU3RhY2soYXBwLCAnVGVzdE9wZW5TZWFyY2hTdGFja0ZvckJlZHJvY2snLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgQmVkcm9ja1N0YWNrKGFwcCwgJ1Rlc3RCZWRyb2NrU3RhY2snLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICAgIGNvbGxlY3Rpb25Bcm46IG9wZW5zZWFyY2hTdGFjay5jb2xsZWN0aW9uLmF0dHJBcm4sXG4gICAgICBidWNrZXRBcm46IG9wZW5zZWFyY2hTdGFjay5zM0J1Y2tldC5hdHRyQXJuLFxuICAgICAgYmVkcm9ja1JvbGVBcm46IG9wZW5zZWFyY2hTdGFjay5iZWRyb2NrUm9sZS5hdHRyQXJuXG4gICAgfSk7XG5cbiAgICBjb25zdCBhbm5vdGF0aW9ucyA9IEFubm90YXRpb25zLmZyb21TdGFjayhzdGFjayk7XG4gICAgY29uc3QgZXJyb3JzID0gYW5ub3RhdGlvbnMuZmluZEVycm9yKCcqJywgTWF0Y2guYW55VmFsdWUoKSk7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBhbm5vdGF0aW9ucy5maW5kV2FybmluZygnKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuXG4gICAgY29uc29sZS5sb2coJ0JlZHJvY2sgU3RhY2sgRXJyb3JzOicsIGVycm9ycyk7XG4gICAgY29uc29sZS5sb2coJ0JlZHJvY2sgU3RhY2sgV2FybmluZ3M6Jywgd2FybmluZ3MpO1xuXG4gICAgZXhwZWN0KGVycm9ycykudG9IYXZlTGVuZ3RoKDApO1xuICB9KTtcblxuICB0ZXN0KCdMYW1iZGEgU3RhY2sgcGFzc2VzIENESyBOQUcgY2hlY2tzJywgKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBkZXBlbmRlbmNpZXNcbiAgICBjb25zdCBzdG9yYWdlU3RhY2sgPSBuZXcgU3RvcmFnZVN0YWNrKGFwcCwgJ1Rlc3RTdG9yYWdlU3RhY2tGb3JMYW1iZGEnLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfVxuICAgIH0pO1xuXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgTGFtYmRhU3RhY2soYXBwLCAnVGVzdExhbWJkYVN0YWNrJywge1xuICAgICAgZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG4gICAgICBkb21haW5BbmFseXplckJ1Y2tldDogc3RvcmFnZVN0YWNrLmRvbWFpbkFuYWx5emVyQnVja2V0LFxuICAgICAgYmVkcm9ja0FnZW50SWQ6ICd0ZXN0LWFnZW50LWlkJyxcbiAgICAgIGJlZHJvY2tBZ2VudEFsaWFzSWQ6ICdUU1RBTElBU0lEJyxcbiAgICAgIGtub3dsZWRnZUJhc2VJZDogJ3Rlc3Qta2ItaWQnXG4gICAgfSk7XG5cbiAgICBjb25zdCBhbm5vdGF0aW9ucyA9IEFubm90YXRpb25zLmZyb21TdGFjayhzdGFjayk7XG4gICAgY29uc3QgZXJyb3JzID0gYW5ub3RhdGlvbnMuZmluZEVycm9yKCcqJywgTWF0Y2guYW55VmFsdWUoKSk7XG4gICAgY29uc3Qgd2FybmluZ3MgPSBhbm5vdGF0aW9ucy5maW5kV2FybmluZygnKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuXG4gICAgY29uc29sZS5sb2coJ0xhbWJkYSBTdGFjayBFcnJvcnM6JywgZXJyb3JzKTtcbiAgICBjb25zb2xlLmxvZygnTGFtYmRhIFN0YWNrIFdhcm5pbmdzOicsIHdhcm5pbmdzKTtcblxuICAgIGV4cGVjdChlcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgdGVzdCgnQW1wbGlmeSBBdXRoIFN0YWNrIHBhc3NlcyBDREsgTkFHIGNoZWNrcycsICgpID0+IHtcbiAgICAvLyBDcmVhdGUgZGVwZW5kZW5jaWVzXG4gICAgY29uc3Qgc3RvcmFnZVN0YWNrID0gbmV3IFN0b3JhZ2VTdGFjayhhcHAsICdUZXN0U3RvcmFnZVN0YWNrRm9yQW1wbGlmeScsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJywgcmVnaW9uOiAndXMtZWFzdC0xJyB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBsYW1iZGFTdGFjayA9IG5ldyBMYW1iZGFTdGFjayhhcHAsICdUZXN0TGFtYmRhU3RhY2tGb3JBbXBsaWZ5Jywge1xuICAgICAgZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG4gICAgICBkb21haW5BbmFseXplckJ1Y2tldDogc3RvcmFnZVN0YWNrLmRvbWFpbkFuYWx5emVyQnVja2V0LFxuICAgICAgYmVkcm9ja0FnZW50SWQ6ICd0ZXN0LWFnZW50LWlkJyxcbiAgICAgIGJlZHJvY2tBZ2VudEFsaWFzSWQ6ICdUU1RBTElBU0lEJyxcbiAgICAgIGtub3dsZWRnZUJhc2VJZDogJ3Rlc3Qta2ItaWQnXG4gICAgfSk7XG5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBBbXBsaWZ5QXV0aFN0YWNrKGFwcCwgJ1Rlc3RBbXBsaWZ5QXV0aFN0YWNrJywge1xuICAgICAgZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH0sXG4gICAgICBkb21haW5BbmFseXplckZ1bmN0aW9uOiBsYW1iZGFTdGFjay5kb21haW5BbmFseXplckZ1bmN0aW9uLFxuICAgICAgZG9jR2VuZXJhdG9yRnVuY3Rpb246IGxhbWJkYVN0YWNrLmRvY0dlbmVyYXRvckZ1bmN0aW9uLFxuICAgICAgYmFja2VuZEZ1bmN0aW9uOiBsYW1iZGFTdGFjay5iYWNrZW5kRnVuY3Rpb24sXG4gICAgICBiYWNrZW5kRnVuY3Rpb25Vcmw6IGxhbWJkYVN0YWNrLmJhY2tlbmRGdW5jdGlvblVybCxcbiAgICAgIGFwaUdhdGV3YXlVcmw6ICcnIC8vIE5vIEFQSSBHYXRld2F5IG5lZWRlZFxuICAgIH0pO1xuXG4gICAgY29uc3QgYW5ub3RhdGlvbnMgPSBBbm5vdGF0aW9ucy5mcm9tU3RhY2soc3RhY2spO1xuICAgIGNvbnN0IGVycm9ycyA9IGFubm90YXRpb25zLmZpbmRFcnJvcignKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuICAgIGNvbnN0IHdhcm5pbmdzID0gYW5ub3RhdGlvbnMuZmluZFdhcm5pbmcoJyonLCBNYXRjaC5hbnlWYWx1ZSgpKTtcblxuICAgIGNvbnNvbGUubG9nKCdBbXBsaWZ5IEF1dGggU3RhY2sgRXJyb3JzOicsIGVycm9ycyk7XG4gICAgY29uc29sZS5sb2coJ0FtcGxpZnkgQXV0aCBTdGFjayBXYXJuaW5nczonLCB3YXJuaW5ncyk7XG5cbiAgICBleHBlY3QoZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gIH0pO1xuXG4gIHRlc3QoJ0FsbCBzdGFja3MgdG9nZXRoZXIgcGFzcyBDREsgTkFHIGNoZWNrcycsICgpID0+IHtcbiAgICAvLyBDcmVhdGUgYWxsIHN0YWNrcyBpbiBkZXBlbmRlbmN5IG9yZGVyXG4gICAgY29uc3Qgb3BlbnNlYXJjaFN0YWNrID0gbmV3IE9wZW5TZWFyY2hTdGFjayhhcHAsICdUZXN0T3BlblNlYXJjaFN0YWNrQWxsJywge1xuICAgICAgZW52OiB7IGFjY291bnQ6ICcxMjM0NTY3ODkwMTInLCByZWdpb246ICd1cy1lYXN0LTEnIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHN0b3JhZ2VTdGFjayA9IG5ldyBTdG9yYWdlU3RhY2soYXBwLCAnVGVzdFN0b3JhZ2VTdGFja0FsbCcsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJywgcmVnaW9uOiAndXMtZWFzdC0xJyB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBiZWRyb2NrU3RhY2sgPSBuZXcgQmVkcm9ja1N0YWNrKGFwcCwgJ1Rlc3RCZWRyb2NrU3RhY2tBbGwnLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICAgIGNvbGxlY3Rpb25Bcm46IG9wZW5zZWFyY2hTdGFjay5jb2xsZWN0aW9uLmF0dHJBcm4sXG4gICAgICBidWNrZXRBcm46IG9wZW5zZWFyY2hTdGFjay5zM0J1Y2tldC5hdHRyQXJuLFxuICAgICAgYmVkcm9ja1JvbGVBcm46IG9wZW5zZWFyY2hTdGFjay5iZWRyb2NrUm9sZS5hdHRyQXJuXG4gICAgfSk7XG5cbiAgICBjb25zdCBsYW1iZGFTdGFjayA9IG5ldyBMYW1iZGFTdGFjayhhcHAsICdUZXN0TGFtYmRhU3RhY2tBbGwnLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsIHJlZ2lvbjogJ3VzLWVhc3QtMScgfSxcbiAgICAgIGRvbWFpbkFuYWx5emVyQnVja2V0OiBzdG9yYWdlU3RhY2suZG9tYWluQW5hbHl6ZXJCdWNrZXQsXG4gICAgICBiZWRyb2NrQWdlbnRJZDogYmVkcm9ja1N0YWNrLmFnZW50SWQsXG4gICAgICBiZWRyb2NrQWdlbnRBbGlhc0lkOiAnVFNUQUxJQVNJRCcsXG4gICAgICBrbm93bGVkZ2VCYXNlSWQ6IGJlZHJvY2tTdGFjay5rbm93bGVkZ2VCYXNlSWRcbiAgICB9KTtcblxuICAgIGNvbnN0IGFtcGxpZnlBdXRoU3RhY2sgPSBuZXcgQW1wbGlmeUF1dGhTdGFjayhhcHAsICdUZXN0QW1wbGlmeUF1dGhTdGFja0FsbCcsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJywgcmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuICAgICAgZG9tYWluQW5hbHl6ZXJGdW5jdGlvbjogbGFtYmRhU3RhY2suZG9tYWluQW5hbHl6ZXJGdW5jdGlvbixcbiAgICAgIGRvY0dlbmVyYXRvckZ1bmN0aW9uOiBsYW1iZGFTdGFjay5kb2NHZW5lcmF0b3JGdW5jdGlvbixcbiAgICAgIGJhY2tlbmRGdW5jdGlvbjogbGFtYmRhU3RhY2suYmFja2VuZEZ1bmN0aW9uLFxuICAgICAgYmFja2VuZEZ1bmN0aW9uVXJsOiBsYW1iZGFTdGFjay5iYWNrZW5kRnVuY3Rpb25VcmwsXG4gICAgICBhcGlHYXRld2F5VXJsOiAnJ1xuICAgIH0pO1xuXG4gICAgLy8gQ2hlY2sgYWxsIHN0YWNrcyBmb3IgZXJyb3JzXG4gICAgY29uc3Qgc3RhY2tzID0gW29wZW5zZWFyY2hTdGFjaywgc3RvcmFnZVN0YWNrLCBiZWRyb2NrU3RhY2ssIGxhbWJkYVN0YWNrLCBhbXBsaWZ5QXV0aFN0YWNrXTtcbiAgICBcbiAgICBzdGFja3MuZm9yRWFjaCgoc3RhY2ssIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzdGFja05hbWVzID0gWydPcGVuU2VhcmNoJywgJ1N0b3JhZ2UnLCAnQmVkcm9jaycsICdMYW1iZGEnLCAnQW1wbGlmeUF1dGgnXTtcbiAgICAgIGNvbnN0IGFubm90YXRpb25zID0gQW5ub3RhdGlvbnMuZnJvbVN0YWNrKHN0YWNrKTtcbiAgICAgIGNvbnN0IGVycm9ycyA9IGFubm90YXRpb25zLmZpbmRFcnJvcignKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuICAgICAgY29uc3Qgd2FybmluZ3MgPSBhbm5vdGF0aW9ucy5maW5kV2FybmluZygnKicsIE1hdGNoLmFueVZhbHVlKCkpO1xuXG4gICAgICBjb25zb2xlLmxvZyhgJHtzdGFja05hbWVzW2luZGV4XX0gU3RhY2sgRXJyb3JzOmAsIGVycm9ycyk7XG4gICAgICBjb25zb2xlLmxvZyhgJHtzdGFja05hbWVzW2luZGV4XX0gU3RhY2sgV2FybmluZ3M6YCwgd2FybmluZ3MpO1xuXG4gICAgICBleHBlY3QoZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgfSk7XG4gIH0pO1xufSk7Il19