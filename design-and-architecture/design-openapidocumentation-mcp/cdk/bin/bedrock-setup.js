#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const opensearch_stack_1 = require("../lib/stacks/opensearch-stack");
const bedrock_stack_1 = require("../lib/stacks/bedrock-stack");
// StorageStack removed - S3 buckets no longer needed as Lambdas return responses directly
const lambda_stack_1 = require("../lib/stacks/lambda-stack");
const mcp_server_stack_1 = require("../lib/stacks/mcp-server-stack");
const app = new cdk.App();
// Deploy OpenSearch Stack first (needed for Bedrock knowledge base)
const opensearchStack = new opensearch_stack_1.OpenSearchStack(app, 'OpenSearchStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'us-east-1'
    }
});
// Storage Stack removed - S3 buckets no longer needed as Lambdas return responses directly
// Deploy Bedrock Stack second (agent and knowledge base for OpenAPI generation)
const bedrockStack = new bedrock_stack_1.BedrockStack(app, 'BedrockStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'us-east-1'
    },
    collectionArn: opensearchStack.collection.attrArn,
    bucketArn: opensearchStack.s3Bucket.attrArn,
    bedrockRoleArn: opensearchStack.bedrockRole.attrArn
});
// Deploy Lambda Stack third (Domain Analyzer and Doc Generator functions)
const lambdaStack = new lambda_stack_1.LambdaStack(app, 'LambdaAPIStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'us-east-1'
    },
    bedrockAgentId: bedrockStack.agentId,
    bedrockAgentAliasId: process.env.BEDROCK_AGENT_ALIAS_ID || 'TSTALIASID', // Default test alias ID
    knowledgeBaseId: bedrockStack.knowledgeBaseId
});
// Deploy MCP Server Stack fourth (ECS service with ALB)
// Get parameters from CDK context
const certificateArn = app.node.tryGetContext('certificateArn');
const domainName = app.node.tryGetContext('domainName');
const allowedIpsString = app.node.tryGetContext('allowedIps');
const allowedIps = allowedIpsString ? allowedIpsString.split(',').map((ip) => ip.trim()) : undefined;
const mcpServerStack = new mcp_server_stack_1.McpServerStack(app, 'McpServerStack', {
    env: {
        account: process.env.CDK_DEFAULT_ACCOUNT,
        region: process.env.CDK_DEFAULT_REGION || 'us-east-1'
    },
    certificateArn,
    domainName,
    allowedIps,
    domainAnalyzerFunction: lambdaStack.domainAnalyzerFunction,
    docGeneratorFunction: lambdaStack.docGeneratorFunction
});
// Add dependencies to ensure proper deployment order
bedrockStack.addDependency(opensearchStack);
lambdaStack.addDependency(bedrockStack);
mcpServerStack.addDependency(lambdaStack); // MCP Server stack depends on Lambda stack for function references
mcpServerStack.addDependency(bedrockStack); // MCP Server stack depends on Bedrock stack for agent configuration
// Comment out cdk-nag checks to avoid deployment issues
// cdk.Aspects.of(app).add(new AwsSolutionsChecks({ verbose: true }));
// CDK Nag suppressions are handled via command line flags in deploy-all.sh
app.synth();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVkcm9jay1zZXR1cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJlZHJvY2stc2V0dXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUNBQW1DO0FBRW5DLHFFQUFpRTtBQUNqRSwrREFBMkQ7QUFDM0QsMEZBQTBGO0FBQzFGLDZEQUF5RDtBQUN6RCxxRUFBZ0U7QUFHaEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsb0VBQW9FO0FBQ3BFLE1BQU0sZUFBZSxHQUFHLElBQUksa0NBQWUsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUU7SUFDbEUsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1FBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLFdBQVc7S0FDdEQ7Q0FDRixDQUFDLENBQUM7QUFFSCwyRkFBMkY7QUFFM0YsZ0ZBQWdGO0FBQ2hGLE1BQU0sWUFBWSxHQUFHLElBQUksNEJBQVksQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFO0lBQ3pELEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXO0tBQ3REO0lBQ0QsYUFBYSxFQUFFLGVBQWUsQ0FBQyxVQUFVLENBQUMsT0FBTztJQUNqRCxTQUFTLEVBQUUsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPO0lBQzNDLGNBQWMsRUFBRSxlQUFlLENBQUMsV0FBVyxDQUFDLE9BQU87Q0FDcEQsQ0FBQyxDQUFDO0FBRUgsMEVBQTBFO0FBQzFFLE1BQU0sV0FBVyxHQUFHLElBQUksMEJBQVcsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUU7SUFDekQsR0FBRyxFQUFFO1FBQ0gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CO1FBQ3hDLE1BQU0sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixJQUFJLFdBQVc7S0FDdEQ7SUFDRCxjQUFjLEVBQUUsWUFBWSxDQUFDLE9BQU87SUFDcEMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsSUFBSSxZQUFZLEVBQUUsd0JBQXdCO0lBQ2pHLGVBQWUsRUFBRSxZQUFZLENBQUMsZUFBZTtDQUM5QyxDQUFDLENBQUM7QUFFSCx3REFBd0Q7QUFDeEQsa0NBQWtDO0FBQ2xDLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDaEUsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUU3RyxNQUFNLGNBQWMsR0FBRyxJQUFJLGlDQUFjLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFO0lBQy9ELEdBQUcsRUFBRTtRQUNILE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtRQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXO0tBQ3REO0lBQ0QsY0FBYztJQUNkLFVBQVU7SUFDVixVQUFVO0lBQ1Ysc0JBQXNCLEVBQUUsV0FBVyxDQUFDLHNCQUFzQjtJQUMxRCxvQkFBb0IsRUFBRSxXQUFXLENBQUMsb0JBQW9CO0NBQ3ZELENBQUMsQ0FBQztBQUVILHFEQUFxRDtBQUNyRCxZQUFZLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzVDLFdBQVcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG1FQUFtRTtBQUM5RyxjQUFjLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsb0VBQW9FO0FBRWhILHdEQUF3RDtBQUN4RCxzRUFBc0U7QUFFdEUsMkVBQTJFO0FBRTNFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmltcG9ydCB7IE9wZW5TZWFyY2hTdGFjayB9IGZyb20gJy4uL2xpYi9zdGFja3Mvb3BlbnNlYXJjaC1zdGFjayc7XG5pbXBvcnQgeyBCZWRyb2NrU3RhY2sgfSBmcm9tICcuLi9saWIvc3RhY2tzL2JlZHJvY2stc3RhY2snO1xuLy8gU3RvcmFnZVN0YWNrIHJlbW92ZWQgLSBTMyBidWNrZXRzIG5vIGxvbmdlciBuZWVkZWQgYXMgTGFtYmRhcyByZXR1cm4gcmVzcG9uc2VzIGRpcmVjdGx5XG5pbXBvcnQgeyBMYW1iZGFTdGFjayB9IGZyb20gJy4uL2xpYi9zdGFja3MvbGFtYmRhLXN0YWNrJztcbmltcG9ydCB7IE1jcFNlcnZlclN0YWNrIH0gZnJvbSAnLi4vbGliL3N0YWNrcy9tY3Atc2VydmVyLXN0YWNrJztcblxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuXG4vLyBEZXBsb3kgT3BlblNlYXJjaCBTdGFjayBmaXJzdCAobmVlZGVkIGZvciBCZWRyb2NrIGtub3dsZWRnZSBiYXNlKVxuY29uc3Qgb3BlbnNlYXJjaFN0YWNrID0gbmV3IE9wZW5TZWFyY2hTdGFjayhhcHAsICdPcGVuU2VhcmNoU3RhY2snLCB7XG4gIGVudjoge1xuICAgIGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsXG4gICAgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfHwgJ3VzLWVhc3QtMSdcbiAgfVxufSk7XG5cbi8vIFN0b3JhZ2UgU3RhY2sgcmVtb3ZlZCAtIFMzIGJ1Y2tldHMgbm8gbG9uZ2VyIG5lZWRlZCBhcyBMYW1iZGFzIHJldHVybiByZXNwb25zZXMgZGlyZWN0bHlcblxuLy8gRGVwbG95IEJlZHJvY2sgU3RhY2sgc2Vjb25kIChhZ2VudCBhbmQga25vd2xlZGdlIGJhc2UgZm9yIE9wZW5BUEkgZ2VuZXJhdGlvbilcbmNvbnN0IGJlZHJvY2tTdGFjayA9IG5ldyBCZWRyb2NrU3RhY2soYXBwLCAnQmVkcm9ja1N0YWNrJywge1xuICBlbnY6IHtcbiAgICBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULFxuICAgIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIHx8ICd1cy1lYXN0LTEnXG4gIH0sXG4gIGNvbGxlY3Rpb25Bcm46IG9wZW5zZWFyY2hTdGFjay5jb2xsZWN0aW9uLmF0dHJBcm4sXG4gIGJ1Y2tldEFybjogb3BlbnNlYXJjaFN0YWNrLnMzQnVja2V0LmF0dHJBcm4sXG4gIGJlZHJvY2tSb2xlQXJuOiBvcGVuc2VhcmNoU3RhY2suYmVkcm9ja1JvbGUuYXR0ckFyblxufSk7XG5cbi8vIERlcGxveSBMYW1iZGEgU3RhY2sgdGhpcmQgKERvbWFpbiBBbmFseXplciBhbmQgRG9jIEdlbmVyYXRvciBmdW5jdGlvbnMpXG5jb25zdCBsYW1iZGFTdGFjayA9IG5ldyBMYW1iZGFTdGFjayhhcHAsICdMYW1iZGFBUElTdGFjaycsIHtcbiAgZW52OiB7XG4gICAgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCxcbiAgICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB8fCAndXMtZWFzdC0xJ1xuICB9LFxuICBiZWRyb2NrQWdlbnRJZDogYmVkcm9ja1N0YWNrLmFnZW50SWQsXG4gIGJlZHJvY2tBZ2VudEFsaWFzSWQ6IHByb2Nlc3MuZW52LkJFRFJPQ0tfQUdFTlRfQUxJQVNfSUQgfHwgJ1RTVEFMSUFTSUQnLCAvLyBEZWZhdWx0IHRlc3QgYWxpYXMgSURcbiAga25vd2xlZGdlQmFzZUlkOiBiZWRyb2NrU3RhY2sua25vd2xlZGdlQmFzZUlkXG59KTtcblxuLy8gRGVwbG95IE1DUCBTZXJ2ZXIgU3RhY2sgZm91cnRoIChFQ1Mgc2VydmljZSB3aXRoIEFMQilcbi8vIEdldCBwYXJhbWV0ZXJzIGZyb20gQ0RLIGNvbnRleHRcbmNvbnN0IGNlcnRpZmljYXRlQXJuID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnY2VydGlmaWNhdGVBcm4nKTtcbmNvbnN0IGRvbWFpbk5hbWUgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KCdkb21haW5OYW1lJyk7XG5jb25zdCBhbGxvd2VkSXBzU3RyaW5nID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dCgnYWxsb3dlZElwcycpO1xuY29uc3QgYWxsb3dlZElwcyA9IGFsbG93ZWRJcHNTdHJpbmcgPyBhbGxvd2VkSXBzU3RyaW5nLnNwbGl0KCcsJykubWFwKChpcDogc3RyaW5nKSA9PiBpcC50cmltKCkpIDogdW5kZWZpbmVkO1xuXG5jb25zdCBtY3BTZXJ2ZXJTdGFjayA9IG5ldyBNY3BTZXJ2ZXJTdGFjayhhcHAsICdNY3BTZXJ2ZXJTdGFjaycsIHtcbiAgZW52OiB7XG4gICAgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCxcbiAgICByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB8fCAndXMtZWFzdC0xJ1xuICB9LFxuICBjZXJ0aWZpY2F0ZUFybixcbiAgZG9tYWluTmFtZSxcbiAgYWxsb3dlZElwcyxcbiAgZG9tYWluQW5hbHl6ZXJGdW5jdGlvbjogbGFtYmRhU3RhY2suZG9tYWluQW5hbHl6ZXJGdW5jdGlvbixcbiAgZG9jR2VuZXJhdG9yRnVuY3Rpb246IGxhbWJkYVN0YWNrLmRvY0dlbmVyYXRvckZ1bmN0aW9uXG59KTtcblxuLy8gQWRkIGRlcGVuZGVuY2llcyB0byBlbnN1cmUgcHJvcGVyIGRlcGxveW1lbnQgb3JkZXJcbmJlZHJvY2tTdGFjay5hZGREZXBlbmRlbmN5KG9wZW5zZWFyY2hTdGFjayk7XG5sYW1iZGFTdGFjay5hZGREZXBlbmRlbmN5KGJlZHJvY2tTdGFjayk7XG5tY3BTZXJ2ZXJTdGFjay5hZGREZXBlbmRlbmN5KGxhbWJkYVN0YWNrKTsgLy8gTUNQIFNlcnZlciBzdGFjayBkZXBlbmRzIG9uIExhbWJkYSBzdGFjayBmb3IgZnVuY3Rpb24gcmVmZXJlbmNlc1xubWNwU2VydmVyU3RhY2suYWRkRGVwZW5kZW5jeShiZWRyb2NrU3RhY2spOyAvLyBNQ1AgU2VydmVyIHN0YWNrIGRlcGVuZHMgb24gQmVkcm9jayBzdGFjayBmb3IgYWdlbnQgY29uZmlndXJhdGlvblxuXG4vLyBDb21tZW50IG91dCBjZGstbmFnIGNoZWNrcyB0byBhdm9pZCBkZXBsb3ltZW50IGlzc3Vlc1xuLy8gY2RrLkFzcGVjdHMub2YoYXBwKS5hZGQobmV3IEF3c1NvbHV0aW9uc0NoZWNrcyh7IHZlcmJvc2U6IHRydWUgfSkpO1xuXG4vLyBDREsgTmFnIHN1cHByZXNzaW9ucyBhcmUgaGFuZGxlZCB2aWEgY29tbWFuZCBsaW5lIGZsYWdzIGluIGRlcGxveS1hbGwuc2hcblxuYXBwLnN5bnRoKCk7XG4iXX0=